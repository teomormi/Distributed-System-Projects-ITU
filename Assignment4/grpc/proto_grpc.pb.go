// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MutualExlusionServiceClient is the client API for MutualExlusionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualExlusionServiceClient interface {
	AskPermission(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error)
}

type mutualExlusionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualExlusionServiceClient(cc grpc.ClientConnInterface) MutualExlusionServiceClient {
	return &mutualExlusionServiceClient{cc}
}

func (c *mutualExlusionServiceClient) AskPermission(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/proto.MutualExlusionService/AskPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutualExlusionServiceServer is the server API for MutualExlusionService service.
// All implementations must embed UnimplementedMutualExlusionServiceServer
// for forward compatibility
type MutualExlusionServiceServer interface {
	AskPermission(context.Context, *Question) (*Answer, error)
	mustEmbedUnimplementedMutualExlusionServiceServer()
}

// UnimplementedMutualExlusionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMutualExlusionServiceServer struct {
}

func (UnimplementedMutualExlusionServiceServer) AskPermission(context.Context, *Question) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskPermission not implemented")
}
func (UnimplementedMutualExlusionServiceServer) mustEmbedUnimplementedMutualExlusionServiceServer() {}

// UnsafeMutualExlusionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualExlusionServiceServer will
// result in compilation errors.
type UnsafeMutualExlusionServiceServer interface {
	mustEmbedUnimplementedMutualExlusionServiceServer()
}

func RegisterMutualExlusionServiceServer(s grpc.ServiceRegistrar, srv MutualExlusionServiceServer) {
	s.RegisterService(&MutualExlusionService_ServiceDesc, srv)
}

func _MutualExlusionService_AskPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualExlusionServiceServer).AskPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MutualExlusionService/AskPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualExlusionServiceServer).AskPermission(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

// MutualExlusionService_ServiceDesc is the grpc.ServiceDesc for MutualExlusionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutualExlusionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MutualExlusionService",
	HandlerType: (*MutualExlusionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskPermission",
			Handler:    _MutualExlusionService_AskPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
